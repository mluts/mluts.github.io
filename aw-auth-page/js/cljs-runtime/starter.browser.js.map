{"version":3,"sources":["starter/browser.cljs"],"mappings":"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","names":["starter.browser/routes","starter.browser/ensure-coll","v","cljs.core/coll?","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","starter.browser/main","seq15758","self__5755__auto__","cljs.core/seq","children","starter.browser/keyboard-input","p__15762","vec__15763","map__15766","cljs.core.nth","cljs.core/--destructure-map","cljs.core.get","js/Error","seq15759","G__15760","cljs.core/first","cljs.core/next","G__15761","self__5754__auto__","-name","state","placeholder","-type","kp","clojure.string/capitalize","cljs.core/name","or__5045__auto__","cljs.core/deref","cljs.core.get_in","event","cljs.core.swap_BANG_","cljs.core/assoc-in","starter.browser/login-form","starter.browser.keyboard_input","js/console.log","starter.browser/login-page","login-state","reagent.core.atom","starter.browser/app","starter.browser/start","reagent.dom.render","js/document.getElementById","starter.browser/init","starter.browser/stop"],"sourcesContent":["(ns starter.browser\n  (:require\n   [reagent.core :as r]\n   [reagent.dom :as rdom]\n   [clojure.string :as str]))\n\n(def routes\n  [[\"/\" {:name :aw/frontpage}]\n   [\"/login\" {:name :aw/login}]])\n\n(defn- ensure-coll [v]\n  (if (coll? v) v [v]))\n\n(defn main [& children]\n  [:main {:class \"container\"}\n   children])\n\n(defn keyboard-input [-name state & [{placeholder :placeholder\n                                      -type :type\n                                      kp :kp\n                                      :or {-type \"text\"\n                                           kp [-name]\n                                           placeholder (str/capitalize (name -name))}}]]\n  {:pre [(some? -name) (some? state)]}\n\n  [:input {:type -type\n           :placeholder (or placeholder (str/capitalize (name -name)))\n           :name (name -name)\n           :value (get-in @state (ensure-coll kp))\n           :on-change (fn [event]\n                        (swap! state assoc-in (ensure-coll kp) (-> event .-target .-value)))}])\n\n(defn login-form [state]\n  [:form\n   (keyboard-input :login state :login)\n   (keyboard-input :password state :password)\n\n   [:input {:type \"submit\" :value \"Login\" :on-click #(js/console.log \"Submit!\")}]])\n\n(defn login-page []\n  (let [login-state (r/atom {})]\n    (fn []\n      [:main\n       {:class \"container\"}\n       [:h1 \"AW Login\"]\n       [login-form login-state]])))\n\n(defn app []\n  (login-page))\n\n;; start is called by init and after code reloading finishes\n(defn ^:dev/after-load start []\n  (js/console.log \"start\")\n  (rdom/render [app] (js/document.getElementById \"app\")))\n\n(defn init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (js/console.log \"init\")\n  (start))\n\n;; this is called before any code is reloaded\n(defn ^:dev/before-load stop []\n  (js/console.log \"stop\"))\n\n(comment)\n"]}