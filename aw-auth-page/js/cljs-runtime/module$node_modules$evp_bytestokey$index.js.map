{
"version":3,
"file":"module$node_modules$evp_bytestokey$index.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,wCAAA,CAA6D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACrG,IAAIC,OAASH,OAAA,CAAQ,uCAAR,CAAuBG,CAAAA,MAApC,CACIC,IAAMJ,OAAA,CAAQ,sCAAR,CA2CVC,OAAOC,CAAAA,OAAP,CAxCAG,QAAwB,CAACC,QAAD,CAAWC,IAAX,CAAiBC,OAAjB,CAA0BC,KAA1B,CAAiC,CAClDN,MAAOO,CAAAA,QAAP,CAAgBJ,QAAhB,CAAL,GAAgCA,QAAhC,CAA2CH,MAAOQ,CAAAA,IAAP,CAAYL,QAAZ,CAAsB,QAAtB,CAA3C,CACA,IAAIC,IAAJ,GACOJ,MAAOO,CAAAA,QAAP,CAAgBH,IAAhB,CACD,GADwBA,IACxB,CAD+BJ,MAAOQ,CAAAA,IAAP,CAAYJ,IAAZ,CAAkB,QAAlB,CAC/B,EAAgB,CAAhB,GAAAA,IAAKK,CAAAA,MAFX,EAEyB,KAAM,KAAIC,UAAJ,CAAe,0CAAf,CAAN,CAGZL,OAATM,EAAmB,CAKvB,KAJA,IAAIC;AAAMZ,MAAOa,CAAAA,KAAP,CAAaF,OAAb,CAAV,CACIG,GAAKd,MAAOa,CAAAA,KAAP,CAAaP,KAAb,EAAsB,CAAtB,CADT,CAEIS,IAAMf,MAAOa,CAAAA,KAAP,CAAa,CAAb,CAEV,CAAgB,CAAhB,CAAOF,OAAP,EAA6B,CAA7B,CAAqBL,KAArB,CAAA,CAAgC,CAC9B,IAAIU,KAAO,IAAIf,GACfe,KAAKC,CAAAA,MAAL,CAAYF,GAAZ,CACAC,KAAKC,CAAAA,MAAL,CAAYd,QAAZ,CACIC,KAAJ,EAAUY,IAAKC,CAAAA,MAAL,CAAYb,IAAZ,CACVW,IAAA,CAAMC,IAAKE,CAAAA,MAAL,EAEFC,KAAAA,CAAO,CAEX,IAAa,CAAb,CAAIR,OAAJ,CAAgB,CACd,IAAIS,SAAWR,GAAIH,CAAAA,MAAfW,CAAwBT,OAC5BQ,KAAA,CAAOE,IAAKC,CAAAA,GAAL,CAASX,OAAT,CAAiBI,GAAIN,CAAAA,MAArB,CACPM,IAAIQ,CAAAA,IAAJ,CAASX,GAAT,CAAcQ,QAAd,CAAwB,CAAxB,CAA2BD,IAA3B,CACAR,QAAA,EAAUQ,IAJI,CAOZA,IAAJ,CAAWJ,GAAIN,CAAAA,MAAf,EAAiC,CAAjC,CAAyBH,KAAzB,GAEMG,QAEJ,CAFaY,IAAKC,CAAAA,GAAL,CAAShB,KAAT,CAAgBS,GAAIN,CAAAA,MAApB,CAA6BU,IAA7B,CAEb,CADAJ,GAAIQ,CAAAA,IAAJ,CAAST,EAAT,CAFcA,EAAGL,CAAAA,MAEjB,CAF0BH,KAE1B,CAAsBa,IAAtB,CAA4BA,IAA5B,CAAmCV,QAAnC,CACA,CAAAH,KAAA,EAASG,QAJX,CAhB8B,CAwBhCM,GAAIS,CAAAA,IAAJ,CAAS,CAAT,CACA,OAAO,CAAOZ,GAAP,CAAgBE,EAAhB,CArCgD,CAL4C;",
"sources":["node_modules/evp_bytestokey/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$evp_bytestokey$index\"] = function(global,require,module,exports) {\nvar Buffer = require('safe-buffer').Buffer\nvar MD5 = require('md5.js')\n\n/* eslint-disable camelcase */\nfunction EVP_BytesToKey (password, salt, keyBits, ivLen) {\n  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')\n  if (salt) {\n    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')\n    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')\n  }\n\n  var keyLen = keyBits / 8\n  var key = Buffer.alloc(keyLen)\n  var iv = Buffer.alloc(ivLen || 0)\n  var tmp = Buffer.alloc(0)\n\n  while (keyLen > 0 || ivLen > 0) {\n    var hash = new MD5()\n    hash.update(tmp)\n    hash.update(password)\n    if (salt) hash.update(salt)\n    tmp = hash.digest()\n\n    var used = 0\n\n    if (keyLen > 0) {\n      var keyStart = key.length - keyLen\n      used = Math.min(keyLen, tmp.length)\n      tmp.copy(key, keyStart, 0, used)\n      keyLen -= used\n    }\n\n    if (used < tmp.length && ivLen > 0) {\n      var ivStart = iv.length - ivLen\n      var length = Math.min(ivLen, tmp.length - used)\n      tmp.copy(iv, ivStart, used, used + length)\n      ivLen -= length\n    }\n  }\n\n  tmp.fill(0)\n  return { key: key, iv: iv }\n}\n\nmodule.exports = EVP_BytesToKey\n\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","MD5","EVP_BytesToKey","password","salt","keyBits","ivLen","isBuffer","from","length","RangeError","keyLen","key","alloc","iv","tmp","hash","update","digest","used","keyStart","Math","min","copy","fill"]
}
