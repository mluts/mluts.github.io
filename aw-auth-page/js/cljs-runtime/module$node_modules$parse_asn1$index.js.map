{
"version":3,
"file":"module$node_modules$parse_asn1$index.js",
"lineCount":6,
"mappings":"AAAAA,cAAA,CAAA,oCAAA,CAAyD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAyBjGC,QAASA,UAAS,CAACC,MAAD,CAAS,CAE1B,GAAsB,QAAtB,GAAI,MAAOA,OAAX,EAAkC,CAACC,MAAOC,CAAAA,QAAP,CAAgBF,MAAhB,CAAnC,CAA4D,CAC3D,IAAAG,SAAWH,MAAOI,CAAAA,UAClBJ,OAAA,CAASA,MAAOK,CAAAA,GAF2C,CAItC,QAAtB,GAAI,MAAOL,OAAX,GACCA,MADD,CACUC,MAAOK,CAAAA,IAAP,CAAYN,MAAZ,CADV,CAIA,KAAIO,SAAWC,OAAA,CAAQR,MAAR,CAAgBG,QAAhB,CAEXM,OAAAA,CAAOF,QAASG,CAAAA,GAChBC,SAAAA,CAAOJ,QAASI,CAAAA,IAEpB,QAAQF,MAAR,EACC,KAAK,aAAL,CACC,IAAAG,MAAQC,IAAKC,CAAAA,WAAYC,CAAAA,MAAjB,CAAwBJ,QAAxB,CAA8B,KAA9B,CAAqCK,CAAAA,cAAeC,CAAAA,oBAE7D,MAAK,YAAL,CAKC,OAJKL,KAIGM;CAHPN,KAGOM,CAHCL,IAAKM,CAAAA,SAAUJ,CAAAA,MAAf,CAAsBJ,QAAtB,CAA4B,KAA5B,CAGDO,EADRA,QACQA,CADEN,KAAMQ,CAAAA,SAAUA,CAAAA,SAAUC,CAAAA,IAA1B,CAA+B,GAA/B,CACFH,CAAAA,QAAR,EACC,KAAK,sBAAL,CACC,MAAOL,KAAKS,CAAAA,YAAaP,CAAAA,MAAlB,CAAyBH,KAAMW,CAAAA,gBAAiBZ,CAAAA,IAAhD,CAAsD,KAAtD,CACR,MAAK,mBAAL,CAEC,MADAC,MAAMY,CAAAA,iBACC,CADmBZ,KAAMW,CAAAA,gBACzB,CAAA,CACNd,KAAM,IADA,CAENE,KAAMC,KAFA,CAIR,MAAK,mBAAL,CAEC,MADAA,MAAMQ,CAAAA,SAAUK,CAAAA,MAAOC,CAAAA,OAChB,CAD0Bb,IAAKc,CAAAA,QAASZ,CAAAA,MAAd,CAAqBH,KAAMW,CAAAA,gBAAiBZ,CAAAA,IAA5C,CAAkD,KAAlD,CAC1B,CAAA,CACNF,KAAM,KADA,CAENE,KAAMC,KAAMQ,CAAAA,SAAUK,CAAAA,MAFhB,CAIR,SAAS,KAAUG,MAAJ,CAAU,iBAAV,CAA8BV,QAA9B,CAAN;AAfV,CAkBD,KAAK,uBAAL,CAEgBP,IAAAA,KADfA,QACeA,CADRE,IAAKgB,CAAAA,mBAAoBd,CAAAA,MAAzB,CAAgCJ,QAAhC,CAAsC,KAAtC,CACcR,SAAAA,CAAAA,QA1DvB,KAAI2B,KAAOnB,IAAKS,CAAAA,SAAUW,CAAAA,OAAQC,CAAAA,GAAIC,CAAAA,SAAUH,CAAAA,IAAhD,CACII,MAAQC,QAAA,CAASxB,IAAKS,CAAAA,SAAUW,CAAAA,OAAQC,CAAAA,GAAIC,CAAAA,SAAUC,CAAAA,KAAME,CAAAA,QAA3C,EAAT,CAAgE,EAAhE,CACRC,MAAAA,CAAOC,KAAA,CAAM3B,IAAKS,CAAAA,SAAUW,CAAAA,OAAQQ,CAAAA,MAAOF,CAAAA,IAAKhB,CAAAA,IAAnC,CAAwC,GAAxC,CAAN,CACPmB,OAAAA,CAAK7B,IAAKS,CAAAA,SAAUW,CAAAA,OAAQQ,CAAAA,MAAOC,CAAAA,EACnCC,SAAAA,CAAa9B,IAAKa,CAAAA,iBAClBkB,KAAAA,CAASP,QAAA,CAASE,KAAKM,CAAAA,KAAL,CAAW,GAAX,CAAA,CAAgB,CAAhB,CAAT,CAA6B,EAA7B,CAATD,CAA4C,CAC5CrC,SAAAA,CAAMuC,MAAOC,CAAAA,UAAP,CAAkB1C,QAAlB,CAA4B2B,IAA5B,CAAkCI,KAAlC,CAAyCQ,IAAzC,CAAiD,MAAjD,CACNH,MAAAA,CAASO,OAAQC,CAAAA,gBAAR,CAAyBV,KAAzB;AAA+BhC,QAA/B,CAAoCmC,MAApC,CACTQ,OAAAA,CAAM,EACVA,OAAIC,CAAAA,IAAJ,CAASV,KAAOW,CAAAA,MAAP,CAAcT,QAAd,CAAT,CACAO,OAAIC,CAAAA,IAAJ,CAASV,KAAA,CAAO,OAAP,CAAA,EAAT,CACA,SAAA,CAAOtC,MAAOkD,CAAAA,MAAP,CAAcH,MAAd,CAiDN,MAAK,aAAL,CAGC,OAFApC,KAEQM,CAFAL,IAAKuC,CAAAA,UAAWrC,CAAAA,MAAhB,CAAuBJ,QAAvB,CAA6B,KAA7B,CAEAO,CADRA,QACQA,CADEN,KAAMQ,CAAAA,SAAUA,CAAAA,SAAUC,CAAAA,IAA1B,CAA+B,GAA/B,CACFH,CAAAA,QAAR,EACC,KAAK,sBAAL,CACC,MAAOL,KAAKwC,CAAAA,aAActC,CAAAA,MAAnB,CAA0BH,KAAMY,CAAAA,iBAAhC,CAAmD,KAAnD,CACR,MAAK,mBAAL,CACC,MAAO,CACN8B,MAAO1C,KAAMQ,CAAAA,SAAUkC,CAAAA,KADjB,CAENC,WAAY1C,IAAK2C,CAAAA,YAAazC,CAAAA,MAAlB,CAAyBH,KAAMY,CAAAA,iBAA/B,CAAkD,KAAlD,CAAyD+B,CAAAA,UAF/D,CAIR,MAAK,mBAAL,CAEC,MADA3C,MAAMQ,CAAAA,SAAUK,CAAAA,MAAOgC,CAAAA,QAChB;AAD2B5C,IAAKc,CAAAA,QAASZ,CAAAA,MAAd,CAAqBH,KAAMY,CAAAA,iBAA3B,CAA8C,KAA9C,CAC3B,CAAA,CACNf,KAAM,KADA,CAENgB,OAAQb,KAAMQ,CAAAA,SAAUK,CAAAA,MAFlB,CAIR,SAAS,KAAUG,MAAJ,CAAU,iBAAV,CAA8BV,QAA9B,CAAN,CAdV,CAiBD,KAAK,gBAAL,CACC,MAAOL,KAAKS,CAAAA,YAAaP,CAAAA,MAAlB,CAAyBJ,QAAzB,CAA+B,KAA/B,CACR,MAAK,iBAAL,CACC,MAAOE,KAAKwC,CAAAA,aAActC,CAAAA,MAAnB,CAA0BJ,QAA1B,CAAgC,KAAhC,CACR,MAAK,iBAAL,CACC,MAAO,CACNF,KAAM,KADA,CAENgB,OAAQZ,IAAK6C,CAAAA,aAAc3C,CAAAA,MAAnB,CAA0BJ,QAA1B,CAAgC,KAAhC,CAFF,CAIR,MAAK,gBAAL,CAEC,MADAA,SACO,CADAE,IAAK2C,CAAAA,YAAazC,CAAAA,MAAlB,CAAyBJ,QAAzB,CAA+B,KAA/B,CACA,CAAA,CACN2C,MAAO3C,QAAKgD,CAAAA,UAAWC,CAAAA,KADjB,CAENL,WAAY5C,QAAK4C,CAAAA,UAFX,CAIR;QAAS,KAAU3B,MAAJ,CAAU,mBAAV,CAAgCnB,MAAhC,CAAN,CAlEV,CAf0B,CAtB3B,IAAII,KAAOjB,OAAA,CAAQ,qCAAR,CAAX,CACI0C,MAAQ1C,OAAA,CAAQ,2CAAR,CADZ,CAEIY,QAAUZ,OAAA,CAAQ,wCAAR,CAFd,CAGIkD,QAAUlD,OAAA,CAAQ,4CAAR,CAHd,CAIIgD,OAAShD,OAAA,CAAQ,oCAAR,CAJb,CAKIK,OAASL,OAAA,CAAQ,uCAAR,CAAuBK,CAAAA,MAqGpCF,UAAU8D,CAAAA,SAAV,CAAsBhD,IAAKgD,CAAAA,SAE3BhE,OAAOC,CAAAA,OAAP,CAAiBC,SA/GgF;",
"sources":["node_modules/parse-asn1/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$parse_asn1$index\"] = function(global,require,module,exports) {\n'use strict';\n\nvar asn1 = require('./asn1');\nvar aesid = require('./aesid.json');\nvar fixProc = require('./fixProc');\nvar ciphers = require('browserify-aes');\nvar compat = require('pbkdf2');\nvar Buffer = require('safe-buffer').Buffer;\n\nfunction decrypt(data, password) {\n\tvar salt = data.algorithm.decrypt.kde.kdeparams.salt;\n\tvar iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);\n\tvar algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')];\n\tvar iv = data.algorithm.decrypt.cipher.iv;\n\tvar cipherText = data.subjectPrivateKey;\n\tvar keylen = parseInt(algo.split('-')[1], 10) / 8;\n\tvar key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1');\n\tvar cipher = ciphers.createDecipheriv(algo, key, iv);\n\tvar out = [];\n\tout.push(cipher.update(cipherText));\n\tout.push(cipher['final']());\n\treturn Buffer.concat(out);\n}\n\nfunction parseKeys(buffer) {\n\tvar password;\n\tif (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {\n\t\tpassword = buffer.passphrase;\n\t\tbuffer = buffer.key;\n\t}\n\tif (typeof buffer === 'string') {\n\t\tbuffer = Buffer.from(buffer);\n\t}\n\n\tvar stripped = fixProc(buffer, password);\n\n\tvar type = stripped.tag;\n\tvar data = stripped.data;\n\tvar subtype, ndata;\n\tswitch (type) {\n\t\tcase 'CERTIFICATE':\n\t\t\tndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo;\n\t\t\t// falls through\n\t\tcase 'PUBLIC KEY':\n\t\t\tif (!ndata) {\n\t\t\t\tndata = asn1.PublicKey.decode(data, 'der');\n\t\t\t}\n\t\t\tsubtype = ndata.algorithm.algorithm.join('.');\n\t\t\tswitch (subtype) {\n\t\t\t\tcase '1.2.840.113549.1.1.1':\n\t\t\t\t\treturn asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');\n\t\t\t\tcase '1.2.840.10045.2.1':\n\t\t\t\t\tndata.subjectPrivateKey = ndata.subjectPublicKey;\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: 'ec',\n\t\t\t\t\t\tdata: ndata\n\t\t\t\t\t};\n\t\t\t\tcase '1.2.840.10040.4.1':\n\t\t\t\t\tndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der');\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: 'dsa',\n\t\t\t\t\t\tdata: ndata.algorithm.params\n\t\t\t\t\t};\n\t\t\t\tdefault: throw new Error('unknown key id ' + subtype);\n\t\t\t}\n\t\t\t// throw new Error('unknown key type ' + type)\n\t\tcase 'ENCRYPTED PRIVATE KEY':\n\t\t\tdata = asn1.EncryptedPrivateKey.decode(data, 'der');\n\t\t\tdata = decrypt(data, password);\n\t\t\t// falls through\n\t\tcase 'PRIVATE KEY':\n\t\t\tndata = asn1.PrivateKey.decode(data, 'der');\n\t\t\tsubtype = ndata.algorithm.algorithm.join('.');\n\t\t\tswitch (subtype) {\n\t\t\t\tcase '1.2.840.113549.1.1.1':\n\t\t\t\t\treturn asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der');\n\t\t\t\tcase '1.2.840.10045.2.1':\n\t\t\t\t\treturn {\n\t\t\t\t\t\tcurve: ndata.algorithm.curve,\n\t\t\t\t\t\tprivateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey\n\t\t\t\t\t};\n\t\t\t\tcase '1.2.840.10040.4.1':\n\t\t\t\t\tndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der');\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: 'dsa',\n\t\t\t\t\t\tparams: ndata.algorithm.params\n\t\t\t\t\t};\n\t\t\t\tdefault: throw new Error('unknown key id ' + subtype);\n\t\t\t}\n\t\t\t// throw new Error('unknown key type ' + type)\n\t\tcase 'RSA PUBLIC KEY':\n\t\t\treturn asn1.RSAPublicKey.decode(data, 'der');\n\t\tcase 'RSA PRIVATE KEY':\n\t\t\treturn asn1.RSAPrivateKey.decode(data, 'der');\n\t\tcase 'DSA PRIVATE KEY':\n\t\t\treturn {\n\t\t\t\ttype: 'dsa',\n\t\t\t\tparams: asn1.DSAPrivateKey.decode(data, 'der')\n\t\t\t};\n\t\tcase 'EC PRIVATE KEY':\n\t\t\tdata = asn1.ECPrivateKey.decode(data, 'der');\n\t\t\treturn {\n\t\t\t\tcurve: data.parameters.value,\n\t\t\t\tprivateKey: data.privateKey\n\t\t\t};\n\t\tdefault: throw new Error('unknown key type ' + type);\n\t}\n}\nparseKeys.signature = asn1.signature;\n\nmodule.exports = parseKeys;\n\n};"],
"names":["shadow$provide","global","require","module","exports","parseKeys","buffer","Buffer","isBuffer","password","passphrase","key","from","stripped","fixProc","type","tag","data","ndata","asn1","certificate","decode","tbsCertificate","subjectPublicKeyInfo","subtype","PublicKey","algorithm","join","RSAPublicKey","subjectPublicKey","subjectPrivateKey","params","pub_key","DSAparam","Error","EncryptedPrivateKey","salt","decrypt","kde","kdeparams","iters","parseInt","toString","algo","aesid","cipher","iv","cipherText","keylen","split","compat","pbkdf2Sync","ciphers","createDecipheriv","out","push","update","concat","PrivateKey","RSAPrivateKey","curve","privateKey","ECPrivateKey","priv_key","DSAPrivateKey","parameters","value","signature"]
}
