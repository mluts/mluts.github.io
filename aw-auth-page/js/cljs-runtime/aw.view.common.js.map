{"version":3,"sources":["aw/view/common.cljs"],"mappings":";AAMA,6BAAA,7BAAOA,kEAAaC;AAApB,AACE,GAAI,AAACC,sBAAMD;AAAGA;;AAAd,0FAAiBA;;;AAEnB,AAAA,gCAAA,wCAAAE,xEAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,mEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,qEAAA,uBAAAG,5FAAMD,gFAAgBc,MAAMC;AAA5B,AAAA,IAAAb,aAAAD;IAAAE,aAAA,AAAAC,4CAAAF,WAAA,IAAA;IAAAC,iBAAA,AAAAE,4BAAAF;kBAAA,AAAAG,4CAAAH,eAAA,zEAAsCa,4IAOiB,AAACI,0BAAe,AAACC,eAAKP;YAP7E,AAAAR,4CAAAH,eAAA,qDAAA,xHACsCc;SADtC,AAAAX,4CAAAH,eAAA,gDAAA,hHAEsCe,mMAGSJ;YAL/C,AAAAR,4CAAAH,eAAA,uDAAA,1HAGsCgB;AAHtC,AAAA,GAQS,GAAA,UAAA,TAAOL;AARhB;AAAA,AAAA,MAAA,KAAAP,MAAA;;;AAAA,GAQuB,GAAA,UAAA,TAAOQ;AAR9B;AAAA,AAAA,MAAA,KAAAR,MAAA;;;AAAA,0FAAA,sDAAA,2CAAA,2DAAA,NAUiBU,yEACO,iBAAAK,mBAAIN;AAAJ,AAAA,oBAAAM;AAAAA;;AAAgB,OAACF,0BAAe,AAACC,eAAKP;;KAX9D,qbAAA,2EAAA,4JAAA,vlBAYyB,iGAAA,WAAA,0GAAA,eAAA,gHAAA,mBAAA,tWACE,gCAAA,hCAACS,0BAAUJ,kFACX,gCAAA,hCAACI,0BAAUJ,+FACX,gCAAA,hCAACI,0BAAUJ,oKACrB,AAACE,eAAKP,6DACL,+CAAA,AAAAU,/CAACC,+DAAQV,OAAM,AAACxB,2BAAY2B,oEACxB,WAAKQ;AAAL,AACE,OAACC,mDAAMZ,MAAMa,mBAAS,AAACrC,2BAAY2B,IAAI,AAAA,AAAIQ;;;;AAnBnE,CAAA,wDAAA,xDAAM1B;;AAAN;AAAA,CAAA,kDAAA,WAAAQ,7DAAMR;AAAN,AAAA,IAAAS,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAI,WAAA,AAAAF,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAK,qBAAA;AAAA,AAAA,OAAAA,wDAAAJ,SAAAG,SAAAJ;;;AAAA,AAqBA,yBAAA,zBAAMqB,0DAASC;AAAf,AAAA,0FAAA,8CAAA,2CAAA,wDAAA,8BAAwDA;;AAExD,0BAAA,1BAAMC,4DAAUC;AAAhB,AACE,AAACC;;AACD,uCAAA,hCAACC","names":["aw.view.common/ensure-coll","v","cljs.core/coll?","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","aw.view.common/keyboard-input","p__25217","vec__25218","map__25221","cljs.core.nth","cljs.core/--destructure-map","cljs.core.get","js/Error","seq25214","G__25215","cljs.core/first","cljs.core/next","G__25216","self__5754__auto__","-name","state","placeholder","-type","kp","flags","clojure.string/capitalize","cljs.core/name","or__5045__auto__","cljs.core/contains?","cljs.core/deref","cljs.core.get_in","event","cljs.core.swap_BANG_","cljs.core/assoc-in","aw.view.common/error-p","text","aw.view.common/sign-out","_e","aw.session/deauthorize!","aw.route-helpers/redirect!"],"sourcesContent":["(ns aw.view.common\n  (:require\n   [clojure.string :as str]\n   [aw.session :as session]\n   [aw.route-helpers :as rh]))\n\n(defn- ensure-coll [v]\n  (if (coll? v) v [v]))\n\n(defn keyboard-input [-name state & [{placeholder :placeholder\n                                      -type :type\n                                      kp :kp\n                                      flags :flags\n                                      :or {-type \"text\"\n                                           kp [-name]\n                                           flags #{}\n                                           placeholder (str/capitalize (name -name))}}]]\n  {:pre [(some? -name) (some? state)]}\n\n  [:input {:type -type\n           :placeholder (or placeholder (str/capitalize (name -name)))\n           :autoComplete (cond\n                           (contains? flags :username) \"username\"\n                           (contains? flags :new-password) \"new-password\"\n                           (contains? flags :current-password) \"current-password\")\n           :name (name -name)\n           :value (get-in @state (ensure-coll kp))\n           :on-change (fn [event]\n                        (swap! state assoc-in (ensure-coll kp) (-> event .-target .-value)))}])\n\n(defn error-p [text] [:p {:class \"pico-color-pink-500\"} text])\n\n(defn sign-out [_e]\n  (session/deauthorize!)\n  (rh/redirect! :aw/signin))\n"]}