{"version":3,"sources":["aw/data.cljs"],"mappings":";AAOA,iBAAA,2CAAA,6DAAA,2CAAA,sEAAA,8EAAA,2DAAA,8EAAA,sDAAA,0BAAA,uEAAA,2CAAA,sEAAA,sFAAA,8DAAA,2CAAA,sEAAA,8EAAA,2DAAA,vlCAAKA;AASL,AAAKC,0EACC,AAACC,uDAAWF,nFACZ,iBAAAG,7CAKA,iBAAAG;IALAF,WAAA,mFAAA,2CAAA,qDAAA,IAAA,8DAAA,sBAAA,kDAAA,qCAAA,2CAAA,qDAAA,IAAA,8DAAA,gBAAA,kDAAA,+BAAA,2CAAA,qDAAA,IAAA,8DAAA,WAAA,kDAAA,0BAAA,2CAAA,qDAAA,IAAA,8DAAA,QAAA,kDAAA;AAAA,AAAA,sHAAAD,SAAAC,8CAAAD,SAAAC,9KAACC,wDAAAA,2EAAAA;;AAKD,AAAA,gIAAAC,mDAAAA,3KAACC,6DAAAA,uEAAAA;;AAEP,AAAA,6BAAA,qCAAAC,lEAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,yDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,yDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,2DAAA,3DAAMD,sEACFE;AADJ,AAEG,OAACC,mBACA,AAACC,cAAI,iBAAAC,WAAA,mFAAA,oDAAA,AAAA,sDAAA,wDAAA,mFAAA,AAAA,sDAAA,6DAAsCH;IAAtCI,WAAA,AAAAC,gBACMhB;AADN,AAAA,0GAAAc,SAAAC,wCAAAD,SAAAC,5JAACE,kDAAAA,qEAAAA;;;;AAHV,CAAA,2DAAA,3DAAMR,sEAKFE,SAASO;AALb,AAMG,OAACN,mBACA,AAACC,cAAI,iBAAAM,WAAA,mFAAA,oDAAA,AAAA,sDAAA,wDAAA,mFAAA,AAAA,sDAAA,8EAAA,mFAAA,AAAA,sDAAA,1JAEqBR,iOACK,CAACU,oDAAAA,8DAAAA,ZAAiBH,0CAAAA;IAH5CE,WAAA,AAAAJ,gBAIMhB;AAJN,AAAA,0GAAAmB,SAAAC,wCAAAD,SAAAC,5JAACH,kDAAAA,qEAAAA;;;;AAPV,CAAA,qDAAA,rDAAMR;;AAAN,AAaA,wBAAA,xBAAMa,wDAAeX,SAASO;AAA9B,AACE,IAAAK,WAAavB;IAAbwB,WAAA,mFAAA,mFAAA,qDAAA,KAAA,8EAAA,mFAAA,qDAAA,KAAA,9JAA4Cb,qOACK,CAACU,oDAAAA,8DAAAA,ZAAiBH,0CAAAA;AADnE,AAAA,oIAAAK,SAAAC,qDAAAD,SAAAC,nMAACC,+DAAAA,kFAAAA;;AAGH,qBAAA,rBAAMC;AAAN,AACE,IAAAC,WAAA,AAAA;IAAAC,WAAA,AAAAZ,gBAIMhB;AAJN,AAAA,0GAAA2B,SAAAC,wCAAAD,SAAAC,5JAACX,kDAAAA,qEAAAA;;AAMH,oBAAA,pBAAMY,gDAAWC;AAAjB,AACE,IAAAC,WAAA,mFAAA,oDAAA,AAAA,8MAAA,wDAAA,sFAAA,8DAAA,AAAA,kEAAA,sFAAA,kDAAA,AAAA,3QAEOD,sNACAA;IAHPE,WAAA,AAAAhB,gBAIMhB;AAJN,AAAA,0GAAA+B,SAAAC,wCAAAD,SAAAC,5JAACf,kDAAAA,qEAAAA;;AAMH,8BAAA,9BAAKgB;AACL,8BAAA,9BAAKC;AAEL,gCAAA,hCAAMC,wEAAuBjB;AAA7B,AACE,SAAK,GAAK,AAACkB,4BAAWlB,iBACjB,CAAI,AAACmB,gBAAMnB,aAAUe;;AAE5B,gCAAA,hCAAMK,wEAAuB3B;AAA7B,AACE,SAAK,GAAK,AAACyB,4BAAWzB,iBACjB,CAAI,AAAC0B,gBAAM1B,aAAUuB","names":["aw.data/schema","aw.data/db-conn","datascript.core.empty_db","G__24956","G__24957","datascript.core/db-with","G__24955","datascript.core/conn-from-db","var_args","G__24959","aw.data/user-exists?","js/Error","username","cljs.core/boolean","cljs.core/seq","G__24960","G__24961","cljs.core/deref","datascript.core/q","password","G__24962","G__24963","aw.crypto/calc-hash","aw.data/register-user","G__24964","G__24965","datascript.core/transact!","aw.data/find-games","G__24966","G__24967","aw.data/find-game","id","G__24968","G__24969","aw.data/min-password-legnth","aw.data/min-username-length","aw.data/check-password-length","clojure.string/blank?","cljs.core/count","aw.data/check-username-length"],"sourcesContent":["(ns aw.data\n  (:require [datascript.core :as d]\n            ; [datascript.db :as db]\n            [clojure.string :as str]\n            [aw.crypto :as crypto]))\n\n;; https://docs.datomic.com/schema/schema-reference.html\n(def schema\n  {:username {:db/cardinality :db.cardinality/one\n              :db/unique :db.unique/identity\n              :db/doc \"Unique Username\"}\n   :password-hash {:db/cardinality :db.cardinality/one}\n\n   :game-name {:db/cardinality :db.cardinality/one\n               :db/unique :db.unique/identity}})\n\n(def db-conn\n  (-> (d/empty-db schema)\n      (d/db-with\n       [{:db/id 1 :game-name \"Mai Chan Sweet Buns\" :url \"/pico8/mai_chan_sweet_buns\"}\n        {:db/id 2 :game-name \"Breakout Hero\" :url \"/pico8/breakout_hero\"}\n        {:db/id 3 :game-name \"Porklike\" :url \"/pico8/porklike\"}\n        {:db/id 4 :game-name \"Willo\" :url \"/pico8/willo\"}])\n      (d/conn-from-db)))\n\n(defn user-exists?\n  ([username]\n   (boolean\n    (seq (d/q [:find '?e :where ['?e :username username]]\n              @db-conn))))\n  ([username password]\n   (boolean\n    (seq (d/q [:find '?e\n               :where\n               ['?e :username username]\n               ['?e :password-hash (crypto/calc-hash password)]]\n              @db-conn)))))\n\n(defn register-user [username password]\n  (d/transact! db-conn [[:db/add -1 :username username]\n                        [:db/add -1 :password-hash (crypto/calc-hash password)]]))\n\n(defn find-games []\n  (d/q '[:find ?e ?game ?url\n         :where\n         [?e :game-name ?game]\n         [?e :url ?url]]\n       @db-conn))\n\n(defn find-game [id]\n  (d/q [:find '[?game ?url]\n        :where\n        [id :game-name '?game]\n        [id :url '?url]]\n       @db-conn))\n\n(def min-password-legnth 6)\n(def min-username-length 2)\n\n(defn check-password-length [password]\n  (and (not (str/blank? password))\n       (>= (count password) min-password-legnth)))\n\n(defn check-username-length [username]\n  (and (not (str/blank? username))\n       (>= (count username) min-username-length)))\n"]}