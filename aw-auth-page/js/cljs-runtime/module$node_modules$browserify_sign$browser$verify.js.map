{
"version":3,
"file":"module$node_modules$browserify_sign$browser$verify.js",
"lineCount":5,
"mappings":"AAAAA,cAAA,CAAA,kDAAA,CAAuE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiF/GC,QAASA,WAAU,CAACC,CAAD,CAAIC,CAAJ,CAAO,CACxB,GAAiB,CAAjB,EAAID,CAAEE,CAAAA,IAAF,CAAO,CAAP,CAAJ,CAAsB,KAAUC,MAAJ,CAAU,aAAV,CAAN,CACtB,GAAgB,CAAhB,EAAIH,CAAEI,CAAAA,GAAF,CAAMH,CAAN,CAAJ,CAAqB,KAAUE,MAAJ,CAAU,aAAV,CAAN,CAFG,CA7E1B,IAAIE,OAAST,OAAA,CAAQ,uCAAR,CAAuBS,CAAAA,MAApC,CACIC,GAAKV,OAAA,CAAQ,sCAAR,CADT,CAEIW,GAAKX,OAAA,CAAQ,2CAAR,CAAoBY,CAAAA,EAF7B,CAGIC,UAAYb,OAAA,CAAQ,sCAAR,CAHhB,CAIIc,OAASd,OAAA,CAAQ,yDAAR,CA8EbC;MAAOC,CAAAA,OAAP,CA5EAa,QAAe,CAACC,GAAD,CAAMC,IAAN,CAAYC,GAAZ,CAAiBC,QAAjB,CAA2BC,GAA3B,CAAgC,CACzCC,GAAAA,CAAMR,SAAA,CAAUK,GAAV,CACV,IAAiB,IAAjB,GAAIG,GAAIC,CAAAA,IAAR,CAAuB,CAErB,GAAiB,OAAjB,GAAIH,QAAJ,EAAyC,WAAzC,GAA4BA,QAA5B,CAAwD,KAAUZ,MAAJ,CAAU,uBAAV,CAAN,CAqCtDgB,QAAAA,CAAUT,MAAA,CApCeO,GAoCJG,CAAAA,IAAKC,CAAAA,SAAUC,CAAAA,KAAMC,CAAAA,IAAzB,CAA8B,GAA9B,CAAP,CACd,IAAI,CAACJ,QAAL,CAAgB,KAAUhB,MAAJ,CAAU,gBAAV,CArCOc,GAqC0BG,CAAAA,IAAKC,CAAAA,SAAUC,CAAAA,KAAMC,CAAAA,IAAzB,CAA8B,GAA9B,CAA7B,CAAN,CArCd,MA0CWZ,CAHDW,IAAIf,EAAJe,CAAOH,QAAPG,CAGCX,EAAAA,MAAN,CAAaE,IAAb,CAAmBD,GAAnB,CA1CsBK,GAwCZG,CAAAA,IAAKI,CAAAA,iBAAkBJ,CAAAA,IAEjC,CA7CgB,CAIhB,GAAiB,KAAjB,GAAIH,GAAIC,CAAAA,IAAR,CAAwB,CAC7B,GAAiB,KAAjB,GAAIH,QAAJ,CAA0B,KAAUZ,MAAJ,CAAU,uBAAV,CAAN,CA4CxBsB,QAAAA,CA3C0BR,GA2ClBG,CAAAA,IAAKK,CAAAA,CACbxB,IAAAA,CA5C0BgB,GA4ClBG,CAAAA,IAAKnB,CAAAA,CACjB,KAAIyB,EA7C0BT,GA6ClBG,CAAAA,IAAKM,CAAAA,CACbC;GAAAA,CA9C0BV,GA8ClBG,CAAAA,IAAKQ,CAAAA,OACjB,KAAIC,SAAWpB,SAAUqB,CAAAA,SAAUC,CAAAA,MAApB,CA/CInB,GA+CJ,CAAgC,KAAhC,CACXoB,IAAAA,CAAIH,QAASG,CAAAA,CACbC,SAAAA,CAAIJ,QAASI,CAAAA,CACjBlC,WAAA,CAAWiC,GAAX,CAAc/B,GAAd,CACAF,WAAA,CAAWkC,QAAX,CAAchC,GAAd,CACA,KAAIiC,MAAQ5B,EAAG6B,CAAAA,IAAH,CAAQV,QAAR,CACRW,IAAAA,CAAIJ,GAAEK,CAAAA,IAAF,CAAOpC,GAAP,CArDN,OA4DkB,EA5DlB,GAsDMyB,CAAEY,CAAAA,KAAF,CAAQJ,KAAR,CACLK,CAAAA,MADK,CACeC,CAAb,IAAIlC,EAAJ,CAAOO,IAAP,CAAa2B,EAAAA,GAAb,CAAiBJ,GAAjB,CAAoBK,CAAAA,GAApB,CAAwBxC,GAAxB,CADF,CAELyC,CAAAA,OAFK,EAGLF,CAAAA,GAHK,CAGDb,GAAEW,CAAAA,KAAF,CAAQJ,KAAR,CAAeK,CAAAA,MAAf,CAAsBN,QAAEO,CAAAA,GAAF,CAAMJ,GAAN,CAASK,CAAAA,GAAT,CAAaxC,GAAb,CAAtB,CAAuCyC,CAAAA,OAAvC,EAHC,CAILD,CAAAA,GAJK,CAIDhB,QAJC,CAKLgB,CAAAA,GALKE,CAKD1C,GALC0C,CAMCvC,CAAAA,GAAF,CAAM6B,QAAN,CA9DwB,CAI/B,GAAiB,KAAjB,GAAIlB,QAAJ,EAAuC,WAAvC,GAA0BA,QAA1B,CAAsD,KAAUZ,MAAJ,CAAU,uBAAV,CAAN,CAEtDU,IAAA,CAAOR,MAAOuC,CAAAA,MAAP,CAAc,CAAC5B,GAAD,CAAMH,IAAN,CAAd,CACHgC,IAAAA,CAAM5B,GAAI6B,CAAAA,OAAQC,CAAAA,UAAZ,EACNC;QAAAA,CAAM,CAAC,CAAD,CAEV,KADIC,CACJ,CADa,CACb,CAAOpC,IAAKqC,CAAAA,MAAZ,CAAqBF,QAAIE,CAAAA,MAAzB,CAAkC,CAAlC,CAAsCL,GAAtC,CAAA,CACEG,QAAIG,CAAAA,IAAJ,CAAS,GAAT,CACA,CAAAF,CAAA,EAAU,CAEZD,SAAIG,CAAAA,IAAJ,CAAS,CAAT,CAEA,KADIC,QACJ,CADQ,CAAC,CACT,CAAO,EAAEA,QAAT,CAAavC,IAAKqC,CAAAA,MAAlB,CAAA,CACEF,QAAIG,CAAAA,IAAJ,CAAStC,IAAA,CAAKuC,QAAL,CAAT,CAEFJ,SAAA,CAAM3C,MAAOgD,CAAAA,IAAP,CAAYL,QAAZ,CACFM,KAAAA,CAAMhD,EAAG6B,CAAAA,IAAH,CAAQlB,GAAI6B,CAAAA,OAAZ,CACVlC,IAAA,CAAkB0B,CAAZ,IAAIhC,EAAJ,CAAOM,GAAP,CAAY0B,EAAAA,KAAZ,CAAkBgB,IAAlB,CAEN1C,IAAA,CAAMA,GAAI2B,CAAAA,MAAJ,CAAW,IAAIjC,EAAJ,CAAOW,GAAIsC,CAAAA,cAAX,CAAX,CACN3C,IAAA,CAAMP,MAAOgD,CAAAA,IAAP,CAAYzC,GAAI8B,CAAAA,OAAJ,EAAcc,CAAAA,OAAd,EAAZ,CACFC,IAAAA,CAAe,CAAT,CAAAR,CAAA,CAAa,CAAb,CAAiB,CAC3BJ,IAAA,CAAMa,IAAKC,CAAAA,GAAL,CAAS/C,GAAIsC,CAAAA,MAAb,CAAqBF,QAAIE,CAAAA,MAAzB,CACFtC,IAAIsC,CAAAA,MAAR,GAAmBF,QAAIE,CAAAA,MAAvB,GAAiCO,GAAjC,CAAuC,CAAvC,CAGA,KADAL,QACA,CADI,CAAC,CACL,CAAO,EAAEA,QAAT,CAAaP,GAAb,CAAA,CAAoBY,GAAA,EAAO7C,GAAA,CAAIwC,QAAJ,CAAP,CAAgBJ,QAAA,CAAII,QAAJ,CACpC,OAAe,EAAf;AAAOK,GArCsC,CAVgE;",
"sources":["node_modules/browserify-sign/browser/verify.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$browserify_sign$browser$verify\"] = function(global,require,module,exports) {\n'use strict';\n\n// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js\nvar Buffer = require('safe-buffer').Buffer;\nvar BN = require('bn.js');\nvar EC = require('elliptic').ec;\nvar parseKeys = require('parse-asn1');\nvar curves = require('./curves.json');\n\nfunction verify(sig, hash, key, signType, tag) {\n  var pub = parseKeys(key);\n  if (pub.type === 'ec') {\n    // rsa keys can be interpreted as ecdsa ones in openssl\n    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') { throw new Error('wrong public key type'); }\n    return ecVerify(sig, hash, pub);\n  } else if (pub.type === 'dsa') {\n    if (signType !== 'dsa') { throw new Error('wrong public key type'); }\n    return dsaVerify(sig, hash, pub);\n  }\n  if (signType !== 'rsa' && signType !== 'ecdsa/rsa') { throw new Error('wrong public key type'); }\n\n  hash = Buffer.concat([tag, hash]);\n  var len = pub.modulus.byteLength();\n  var pad = [1];\n  var padNum = 0;\n  while (hash.length + pad.length + 2 < len) {\n    pad.push(0xff);\n    padNum += 1;\n  }\n  pad.push(0x00);\n  var i = -1;\n  while (++i < hash.length) {\n    pad.push(hash[i]);\n  }\n  pad = Buffer.from(pad);\n  var red = BN.mont(pub.modulus);\n  sig = new BN(sig).toRed(red);\n\n  sig = sig.redPow(new BN(pub.publicExponent));\n  sig = Buffer.from(sig.fromRed().toArray());\n  var out = padNum < 8 ? 1 : 0;\n  len = Math.min(sig.length, pad.length);\n  if (sig.length !== pad.length) { out = 1; }\n\n  i = -1;\n  while (++i < len) { out |= sig[i] ^ pad[i]; }\n  return out === 0;\n}\n\nfunction ecVerify(sig, hash, pub) {\n  var curveId = curves[pub.data.algorithm.curve.join('.')];\n  if (!curveId) { throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.')); }\n\n  var curve = new EC(curveId);\n  var pubkey = pub.data.subjectPrivateKey.data;\n\n  return curve.verify(hash, sig, pubkey);\n}\n\nfunction dsaVerify(sig, hash, pub) {\n  var p = pub.data.p;\n  var q = pub.data.q;\n  var g = pub.data.g;\n  var y = pub.data.pub_key;\n  var unpacked = parseKeys.signature.decode(sig, 'der');\n  var s = unpacked.s;\n  var r = unpacked.r;\n  checkValue(s, q);\n  checkValue(r, q);\n  var montp = BN.mont(p);\n  var w = s.invm(q);\n  var v = g.toRed(montp)\n    .redPow(new BN(hash).mul(w).mod(q))\n    .fromRed()\n    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())\n    .mod(p)\n    .mod(q);\n  return v.cmp(r) === 0;\n}\n\nfunction checkValue(b, q) {\n  if (b.cmpn(0) <= 0) { throw new Error('invalid sig'); }\n  if (b.cmp(q) >= 0) { throw new Error('invalid sig'); }\n}\n\nmodule.exports = verify;\n\n};"],
"names":["shadow$provide","global","require","module","exports","checkValue","b","q","cmpn","Error","cmp","Buffer","BN","EC","ec","parseKeys","curves","verify","sig","hash","key","signType","tag","pub","type","curveId","data","algorithm","curve","join","subjectPrivateKey","p","g","y","pub_key","unpacked","signature","decode","s","r","montp","mont","w","invm","toRed","redPow","mul","mod","fromRed","v","concat","len","modulus","byteLength","pad","padNum","length","push","i","from","red","publicExponent","toArray","out","Math","min"]
}
