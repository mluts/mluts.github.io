{"version":3,"sources":["aw/view/signup.cljs"],"mappings":";AAQA,gCAAA,hCAAMA,wEAAWC;AAAjB,AACE,oBAAI,iBAAAC,oBAAK,AAAC,AAACC,qBAAWC,6BAAY,AAAA,0FAAA,AAAAC,gBAAYJ;AAA1C,AAAA,oBAAAC;AAAA,IAAAA,wBACK,AAAC,AAACC,qBAAWC,6BAAY,AAAA,yGAAA,AAAAC,gBAAmBJ;AADjD,AAAA,oBAAAC;AAEK,OAACI,6CAAE,AAAA,0FAAA,AAAAD,gBAAYJ,QAAO,AAAA,yGAAA,AAAAI,gBAAmBJ;;AAF9CC;;;AAAAA;;;AAGF,iFAAA,0HAAA,3MAACK,0DAAMN,MAAMO,0EAAeC;;AAC5B,iFAAA,0HAAA,3MAACF,0DAAMN,MAAMO,0EAAeE;;;AAE9B,GAAI,AAACC,8BAA2B,AAAA,0FAAA,AAAAN,gBAAYJ;AAC1C,iFAAA,0HAAA,3MAACM,0DAAMN,MAAMO,0EAAeC;;AAC5B,iFAAA,0HAAA,3MAACF,0DAAMN,MAAMO,0EAAeE;;;AAE9B,GAAI,AAACE,8BAA2B,AAAA,2FAAA,AAAAP,gBAAYJ;AAC1C,wFAAA,0HAAA,3MAACM,0DAAMN,MAAMO,0EAAeC;;AAC5B,wFAAA,0HAAA,3MAACF,0DAAMN,MAAMO,0EAAeE;;;AAEhC,wBAAA,xBAAMG,wDAAQZ,MAAMa;AAApB,AACE,AAAiBA;;AACjB,yEAAA,yDAAA,lIAACP,mDAAMN,MAAMc;;AACb,AAACf,8BAAUC;;AAEX,GAAI,AAACe,cAAI,AAAA,uFAAA,AAAAX,gBAAUJ;AACjB,qBAAA,dAACgB,wCAA2C,kDAAA,lDAACC,uDAAc,AAAA,uFAAA,AAAAb,gBAAUJ;;AACrE,GAAI,AAACkB,yDAAkB,AAAA,2FAAA,AAAAd,gBAAYJ;AACjC,wFAAA,0HAAA,3MAACM,0DAAMN,MAAMO,0EAAeE;;AAC5B,AAAI,AAACU,sBAAmB,AAAA,2FAAA,AAAAf,gBAAYJ,QAAO,AAAA,0FAAA,AAAAI,gBAAYJ;;AACnD,uCAAA,hCAACoB;;;;AAEX,sBAAA,tBAAMC;AAAN,AACE,IAAMrB,QAAM,gDAAA,2CAAA,yDAAA,pJAACsB;AAAb,AACE;AAAA,AAAA,0FAAA,mDAAA,mFAAA,kDAAA,qBAAA,mFAAA,sDAAA,2CAAA,84FAAA,mFAAA,sDAAA,2CAAA,qDAAA,SAAA,sDAAA,kCAAA,mFAAA,8CAAA,uBAAA,mFAAA,gDAAA,2CAAA,sLAAA,rpHAKgB,AAACC,gDAAQX,sBAAOZ,eAE5B,4QAAA,mRAAA,7hBACE,yIAAA,zIAACwB,0BAAU,AAAA,uFAAA,AAAApB,gBAAUJ,4FACrB,uBAAA,vBAACyB,+CAED,yIAAA,zIAACD,0BAAU,AAAA,uFAAA,AAAApB,gBAAUJ,8FACrB,uBAAA,vBAACyB,yDAEH,mEAAA,qHAAA,2CAAA,uDAAA,iFAAA,3WAACC,gIAAgC1B,0UAEjC,+NAAA,6CAAA,1QAAM,yIAAA,zIAACwB,0BAAU,AAAA,uFAAA,AAAApB,gBAAUJ,4FACzB,uBAAA,vBAACyB,mDAEH,mEAAA,oHAAA,2CAAA,qDAAA,4DAAA,uDAAA,iFAAA,3dAACC,+HAAgC1B,ocAEjC,uNAAA,iDAAA,tQAAM,yIAAA,zIAACwB,0BAAU,AAAA,uFAAA,AAAApB,gBAAUJ,oFACzB,uBAAA,vBAACyB,uDAEH,mEAAA,mIAAA,2CAAA,mEAAA,kBAAA,uDAAA,iFAAA,0FAAA,qDAAA,7lBAACC,8IAAuC1B,8tCAOH,4DAAA,5DAAC2B","names":["aw.view.signup/validate!","state","and__5043__auto__","cljs.core/complement","clojure.string/blank?","cljs.core/deref","cljs.core._EQ_","cljs.core.swap_BANG_","cljs.core/update","cljs.core/disj","cljs.core/conj","aw.data/check-password-length","aw.data/check-username-length","aw.view.signup/submit","e","cljs.core/assoc","cljs.core/seq","js/console.error","clojure.string.join","aw.data.user_exists_QMARK_","aw.data/register-user","aw.route-helpers/redirect!","aw.view.signup/view","reagent.core.atom","cljs.core.partial","cljs.core/contains?","aw.view.common/error-p","aw.view.common.keyboard_input","aw.route_helpers.resolve_href"],"sourcesContent":["(ns aw.view.signup\n  (:require\n   [aw.view.common :as common]\n   [aw.route-helpers :as rh]\n   [reagent.core :as r]\n   [clojure.string :as str]\n   [aw.data :as data]))\n\n(defn validate! [state]\n  (if (and ((complement str/blank?) (:password @state))\n           ((complement str/blank?) (:password-repeat @state))\n           (= (:password @state) (:password-repeat @state)))\n    (swap! state update :errors disj :password-match)\n    (swap! state update :errors conj :password-match))\n\n  (if (data/check-password-length (:password @state))\n    (swap! state update :errors disj :password-too-short)\n    (swap! state update :errors conj :password-too-short))\n\n  (if (data/check-username-length (:username @state))\n    (swap! state update :errors disj :username-too-short)\n    (swap! state update :errors conj :username-too-short)))\n\n(defn submit [state e]\n  (.preventDefault e)\n  (swap! state assoc :errors #{})\n  (validate! state)\n\n  (if (seq (:errors @state))\n    (js/console.error \"Errors in signup form: \" (str/join \", \" (:errors @state)))\n    (if (data/user-exists? (:username @state))\n      (swap! state update :errors conj :user-already-exists)\n      (do (data/register-user (:username @state) (:password @state))\n          (rh/redirect! :aw/signin)))))\n\n(defn view []\n  (let [state (r/atom {:errors #{}})]\n    (fn []\n      [:div\n       [:h1 \"AW Sign-Up\"]\n\n       [:form\n        {:on-submit (partial submit state)}\n\n        (cond\n          (contains? (:errors @state) :username-too-short)\n          (common/error-p \"Username too short\")\n\n          (contains? (:errors @state) :user-already-exists)\n          (common/error-p \"Username already exists\"))\n\n        (common/keyboard-input :username state {:flags #{:username}})\n\n        (when (contains? (:errors @state) :password-too-short)\n          (common/error-p \"Password too short\"))\n\n        (common/keyboard-input :password state {:type :password :flags #{:new-password}})\n\n        (when (contains? (:errors @state) :password-match)\n          (common/error-p \"Passwords do not match\"))\n\n        (common/keyboard-input :password-repeat state\n                               {:placeholder \"Repeat Password\"\n                                :flags #{:new-password}\n                                :type :password})\n\n        [:input {:type \"submit\" :value \"Sign-Up\"}]]\n\n       [:p \"Already registered? \" [:a {:href (rh/resolve-href :aw/signin)} \"Sign-In\"]]])))\n"]}