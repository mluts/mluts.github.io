{
"version":3,
"file":"module$node_modules$parse_asn1$fixProc.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,sCAAA,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAInG,IAAIC,SAAW,uHAAf,CACIC,WAAa,6CADjB,CAEIC,UAAY,gFAFhB,CAGIC,IAAMN,OAAA,CAAQ,0CAAR,CAHV,CAIIO,QAAUP,OAAA,CAAQ,4CAAR,CAJd,CAKIQ,OAASR,OAAA,CAAQ,uCAAR,CAAuBQ,CAAAA,MACpCP;MAAOC,CAAAA,OAAP,CAAiBO,QAAS,CAACC,IAAD,CAAOC,QAAP,CAAiB,CACtCC,IAAAA,CAAMF,IAAKG,CAAAA,QAAL,EACV,KAAIC,MAAQF,IAAIE,CAAAA,KAAJ,CAAUX,QAAV,CAEZ,IAAKW,KAAL,CAGO,CACN,IAAIC,MAAQ,KAARA,CAAgBD,KAAA,CAAM,CAAN,CAApB,CACIE,GAAKR,MAAOS,CAAAA,IAAP,CAAYH,KAAA,CAAM,CAAN,CAAZ,CAAsB,KAAtB,CACLI,KAAAA,UAAaV,MAAOS,CAAAA,IAAP,CAAYH,KAAA,CAAM,CAAN,CAASK,CAAAA,OAAT,CAAiB,SAAjB,CAA4B,EAA5B,CAAZ,CAA6C,QAA7C,CACbC,MAAAA,CAAYd,GAAA,CAAIK,QAAJ,CAAcK,EAAGK,CAAAA,KAAH,CAAS,CAAT,CAAY,CAAZ,CAAd,CAA8BC,QAAA,CAASR,KAAA,CAAM,CAAN,CAAT,CAAmB,EAAnB,CAA9B,CAAsDF,CAAAA,GAClEW,SAAAA,CAAM,EACNC,MAAAA,CAASjB,OAAQkB,CAAAA,gBAAR,CAAyBV,KAAzB,CAAgCK,KAAhC,CAA2CJ,EAA3C,CACbO,SAAIG,CAAAA,IAAJ,CAASF,KAAOG,CAAAA,MAAP,CAAcT,SAAd,CAAT,CACAK,SAAIG,CAAAA,IAAJ,CAASF,KAAA,CAAO,OAAP,CAAA,EAAT,CACAI,UAAA,CAAYpB,MAAOqB,CAAAA,MAAP,CAAcN,QAAd,CATN,CAHP,IACKO,UACJ,CADalB,IAAIE,CAAAA,KAAJ,CAAUT,SAAV,CACb,CAAAuB,SAAA,CAAYpB,MAAOS,CAAAA,IAAP,CAAYa,SAAA,CAAO,CAAP,CAAUX,CAAAA,OAAV,CAAkB,SAAlB;AAA6B,EAA7B,CAAZ,CAA8C,QAA9C,CAab,OAAO,CACNY,IAFSnB,IAAIE,CAAAA,KAAJ,CAAUV,UAAV,CAAA2B,CAAsB,CAAtBA,CACH,CAENC,KAAMJ,SAFA,CAnBmC,CAVwD;",
"sources":["node_modules/parse-asn1/fixProc.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$parse_asn1$fixProc\"] = function(global,require,module,exports) {\n'use strict';\n\n// adapted from https://github.com/apatil/pemstrip\nvar findProc = /Proc-Type: 4,ENCRYPTED[\\n\\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\\n\\r]+([0-9A-z\\n\\r+/=]+)[\\n\\r]+/m;\nvar startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;\nvar fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\\n\\r+/=]+)-----END \\1-----$/m;\nvar evp = require('evp_bytestokey');\nvar ciphers = require('browserify-aes');\nvar Buffer = require('safe-buffer').Buffer;\nmodule.exports = function (okey, password) {\n\tvar key = okey.toString();\n\tvar match = key.match(findProc);\n\tvar decrypted;\n\tif (!match) {\n\t\tvar match2 = key.match(fullRegex);\n\t\tdecrypted = Buffer.from(match2[2].replace(/[\\r\\n]/g, ''), 'base64');\n\t} else {\n\t\tvar suite = 'aes' + match[1];\n\t\tvar iv = Buffer.from(match[2], 'hex');\n\t\tvar cipherText = Buffer.from(match[3].replace(/[\\r\\n]/g, ''), 'base64');\n\t\tvar cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;\n\t\tvar out = [];\n\t\tvar cipher = ciphers.createDecipheriv(suite, cipherKey, iv);\n\t\tout.push(cipher.update(cipherText));\n\t\tout.push(cipher['final']());\n\t\tdecrypted = Buffer.concat(out);\n\t}\n\tvar tag = key.match(startRegex)[1];\n\treturn {\n\t\ttag: tag,\n\t\tdata: decrypted\n\t};\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","findProc","startRegex","fullRegex","evp","ciphers","Buffer","module.exports","okey","password","key","toString","match","suite","iv","from","cipherText","replace","cipherKey","slice","parseInt","out","cipher","createDecipheriv","push","update","decrypted","concat","match2","tag","data"]
}
