{"version":3,"sources":["aw/db.cljs"],"mappings":";AAOA,eAAA,2CAAA,6DAAA,2CAAA,sEAAA,8EAAA,2DAAA,8EAAA,sDAAA,0BAAA,uEAAA,2CAAA,sEAAA,vsBAAKA;AAML,GAAA,QAAAC,+BAAAC,kCAAAC;AAAA;AAAA,AAAA,AAASC,gBAAQ,CAACC,4DAAAA,0EAAAA,hBAAcL,sDAAAA;;AAEhC,AAAA,2BAAA,mCAAAM,9DAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,uDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,uDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,yDAAA,zDAAMD,oEACFE;AADJ,AAEG,OAACC,mBACA,AAACC,cAAI,iBAAAC,WAAA,mFAAA,oDAAA,AAAA,sDAAA,wDAAA,mFAAA,AAAA,sDAAA,6DAAsCH;IAAtCI,WAAA,AAAAC,gBACMX;AADN,AAAA,0GAAAS,SAAAC,wCAAAD,SAAAC,5JAACE,kDAAAA,qEAAAA;;;;AAHV,CAAA,yDAAA,zDAAMR,oEAKFE,SAASO;AALb,AAMG,OAACN,mBACA,AAACC,cAAI,iBAAAM,WAAA,mFAAA,oDAAA,AAAA,sDAAA,wDAAA,mFAAA,AAAA,sDAAA,8EAAA,mFAAA,AAAA,sDAAA,1JAEqBR,iOACK,CAACU,oDAAAA,8DAAAA,ZAAiBH,0CAAAA;IAH5CE,WAAA,AAAAJ,gBAIMX;AAJN,AAAA,0GAAAc,SAAAC,wCAAAD,SAAAC,5JAACH,kDAAAA,qEAAAA;;;;AAPV,CAAA,mDAAA,nDAAMR;;AAAN,AAaA,sBAAA,tBAAMa,oDAAeX,SAASO;AAA9B,AACE,IAAAK,WAAalB;IAAbmB,WAAA,mFAAA,mFAAA,qDAAA,KAAA,8EAAA,mFAAA,qDAAA,KAAA,9JAA4Cb,qOACK,CAACU,oDAAAA,8DAAAA,ZAAiBH,0CAAAA;AADnE,AAAA,oIAAAK,SAAAC,qDAAAD,SAAAC,nMAACC,+DAAAA,kFAAAA;;AAGH,4BAAA,5BAAKC;AACL,4BAAA,5BAAKC;AAEL,8BAAA,9BAAMC,oEAAuBV;AAA7B,AACE,SAAK,GAAK,AAACW,4BAAWX,iBACjB,CAAI,AAACY,gBAAMZ,aAAUQ;;AAE5B,8BAAA,9BAAMK,oEAAuBpB;AAA7B,AACE,SAAK,GAAK,AAACkB,4BAAWlB,iBACjB,CAAI,AAACmB,gBAAMnB,aAAUgB","names":["aw.db/schema","js/aw","js/aw.db","js/aw.db.db-conn","aw.db/db-conn","datascript.core/create-conn","var_args","G__24908","aw.db/user-exists?","js/Error","username","cljs.core/boolean","cljs.core/seq","G__24909","G__24910","cljs.core/deref","datascript.core/q","password","G__24911","G__24912","aw.crypto/calc-hash","aw.db/register-user","G__24913","G__24914","datascript.core/transact!","aw.db/min-password-legnth","aw.db/min-username-length","aw.db/check-password-length","clojure.string/blank?","cljs.core/count","aw.db/check-username-length"],"sourcesContent":["(ns aw.db\n  (:require [datascript.core :as d]\n            ; [datascript.db :as db]\n            [clojure.string :as str]\n            [aw.crypto :as crypto]))\n\n;; https://docs.datomic.com/schema/schema-reference.html\n(def schema\n  {:username {:db/cardinality :db.cardinality/one\n              :db/unique :db.unique/identity\n              :db/doc \"Unique Username\"}\n   :password-hash {:db/cardinality :db.cardinality/one}})\n\n(defonce db-conn (d/create-conn schema))\n\n(defn user-exists?\n  ([username]\n   (boolean\n    (seq (d/q [:find '?e :where ['?e :username username]]\n              @db-conn))))\n  ([username password]\n   (boolean\n    (seq (d/q [:find '?e\n               :where\n               ['?e :username username]\n               ['?e :password-hash (crypto/calc-hash password)]]\n              @db-conn)))))\n\n(defn register-user [username password]\n  (d/transact! db-conn [[:db/add -1 :username username]\n                        [:db/add -1 :password-hash (crypto/calc-hash password)]]))\n\n(def min-password-legnth 6)\n(def min-username-length 2)\n\n(defn check-password-length [password]\n  (and (not (str/blank? password))\n       (>= (count password) min-password-legnth)))\n\n(defn check-username-length [username]\n  (and (not (str/blank? username))\n       (>= (count username) min-username-length)))\n"]}