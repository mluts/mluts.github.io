{
"version":3,
"file":"module$node_modules$public_encrypt$privateDecrypt.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/public-encrypt/privateDecrypt.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$public_encrypt$privateDecrypt\"] = function(global,require,module,exports) {\nvar parseKeys = require('parse-asn1')\nvar mgf = require('./mgf')\nvar xor = require('./xor')\nvar BN = require('bn.js')\nvar crt = require('browserify-rsa')\nvar createHash = require('create-hash')\nvar withPublic = require('./withPublic')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function privateDecrypt (privateKey, enc, reverse) {\n  var padding\n  if (privateKey.padding) {\n    padding = privateKey.padding\n  } else if (reverse) {\n    padding = 1\n  } else {\n    padding = 4\n  }\n\n  var key = parseKeys(privateKey)\n  var k = key.modulus.byteLength()\n  if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {\n    throw new Error('decryption error')\n  }\n  var msg\n  if (reverse) {\n    msg = withPublic(new BN(enc), key)\n  } else {\n    msg = crt(enc, key)\n  }\n  var zBuffer = Buffer.alloc(k - msg.length)\n  msg = Buffer.concat([zBuffer, msg], k)\n  if (padding === 4) {\n    return oaep(key, msg)\n  } else if (padding === 1) {\n    return pkcs1(key, msg, reverse)\n  } else if (padding === 3) {\n    return msg\n  } else {\n    throw new Error('unknown padding')\n  }\n}\n\nfunction oaep (key, msg) {\n  var k = key.modulus.byteLength()\n  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()\n  var hLen = iHash.length\n  if (msg[0] !== 0) {\n    throw new Error('decryption error')\n  }\n  var maskedSeed = msg.slice(1, hLen + 1)\n  var maskedDb = msg.slice(hLen + 1)\n  var seed = xor(maskedSeed, mgf(maskedDb, hLen))\n  var db = xor(maskedDb, mgf(seed, k - hLen - 1))\n  if (compare(iHash, db.slice(0, hLen))) {\n    throw new Error('decryption error')\n  }\n  var i = hLen\n  while (db[i] === 0) {\n    i++\n  }\n  if (db[i++] !== 1) {\n    throw new Error('decryption error')\n  }\n  return db.slice(i)\n}\n\nfunction pkcs1 (key, msg, reverse) {\n  var p1 = msg.slice(0, 2)\n  var i = 2\n  var status = 0\n  while (msg[i++] !== 0) {\n    if (i >= msg.length) {\n      status++\n      break\n    }\n  }\n  var ps = msg.slice(2, i - 1)\n\n  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {\n    status++\n  }\n  if (ps.length < 8) {\n    status++\n  }\n  if (status) {\n    throw new Error('decryption error')\n  }\n  return msg.slice(i)\n}\nfunction compare (a, b) {\n  a = Buffer.from(a)\n  b = Buffer.from(b)\n  var dif = 0\n  var len = a.length\n  if (a.length !== b.length) {\n    dif++\n    len = Math.min(a.length, b.length)\n  }\n  var i = -1\n  while (++i < len) {\n    dif += (a[i] ^ b[i])\n  }\n  return dif\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","parseKeys","mgf","xor","BN","crt","createHash","withPublic","Buffer","module.exports","privateKey","enc","reverse","padding","key","k","modulus","byteLength","length","cmp","Error","msg","zBuffer","alloc","concat","iHash","update","digest","hLen","maskedSeed","slice","maskedDb","seed","db","a","from","b","dif","len","Math","min","i","p1","status","ps","toString"]
}
